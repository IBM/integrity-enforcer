//
// Copyright 2020 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/IBM/integrity-enforcer/controller/pkg/apis/resourceauditreview/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeResourceAuditReviews implements ResourceAuditReviewInterface
type FakeResourceAuditReviews struct {
	Fake *FakeApisV1alpha1
}

var resourceauditreviewsResource = schema.GroupVersionResource{Group: "apis.integrityshield.io", Version: "v1alpha1", Resource: "resourceauditreviews"}

var resourceauditreviewsKind = schema.GroupVersionKind{Group: "apis.integrityshield.io", Version: "v1alpha1", Kind: "ResourceAuditReview"}

// Get takes name of the resourceAuditReview, and returns the corresponding resourceAuditReview object, and an error if there is any.
func (c *FakeResourceAuditReviews) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ResourceAuditReview, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(resourceauditreviewsResource, name), &v1alpha1.ResourceAuditReview{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ResourceAuditReview), err
}

// List takes label and field selectors, and returns the list of ResourceAuditReviews that match those selectors.
func (c *FakeResourceAuditReviews) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ResourceAuditReviewList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(resourceauditreviewsResource, resourceauditreviewsKind, opts), &v1alpha1.ResourceAuditReviewList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ResourceAuditReviewList{ListMeta: obj.(*v1alpha1.ResourceAuditReviewList).ListMeta}
	for _, item := range obj.(*v1alpha1.ResourceAuditReviewList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested resourceAuditReviews.
func (c *FakeResourceAuditReviews) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(resourceauditreviewsResource, opts))
}

// Create takes the representation of a resourceAuditReview and creates it.  Returns the server's representation of the resourceAuditReview, and an error, if there is any.
func (c *FakeResourceAuditReviews) Create(ctx context.Context, resourceAuditReview *v1alpha1.ResourceAuditReview, opts v1.CreateOptions) (result *v1alpha1.ResourceAuditReview, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(resourceauditreviewsResource, resourceAuditReview), &v1alpha1.ResourceAuditReview{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ResourceAuditReview), err
}

// Update takes the representation of a resourceAuditReview and updates it. Returns the server's representation of the resourceAuditReview, and an error, if there is any.
func (c *FakeResourceAuditReviews) Update(ctx context.Context, resourceAuditReview *v1alpha1.ResourceAuditReview, opts v1.UpdateOptions) (result *v1alpha1.ResourceAuditReview, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(resourceauditreviewsResource, resourceAuditReview), &v1alpha1.ResourceAuditReview{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ResourceAuditReview), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeResourceAuditReviews) UpdateStatus(ctx context.Context, resourceAuditReview *v1alpha1.ResourceAuditReview, opts v1.UpdateOptions) (*v1alpha1.ResourceAuditReview, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(resourceauditreviewsResource, "status", resourceAuditReview), &v1alpha1.ResourceAuditReview{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ResourceAuditReview), err
}

// Delete takes name of the resourceAuditReview and deletes it. Returns an error if one occurs.
func (c *FakeResourceAuditReviews) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(resourceauditreviewsResource, name), &v1alpha1.ResourceAuditReview{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeResourceAuditReviews) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(resourceauditreviewsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.ResourceAuditReviewList{})
	return err
}

// Patch applies the patch and returns the patched resourceAuditReview.
func (c *FakeResourceAuditReviews) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ResourceAuditReview, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(resourceauditreviewsResource, name, pt, data, subresources...), &v1alpha1.ResourceAuditReview{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ResourceAuditReview), err
}
