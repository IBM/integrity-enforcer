/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/open-cluster-management/integrity-shield/observer/pkg/apis/manifestintegritystate/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManifestIntegrityStateLister helps list ManifestIntegrityStates.
// All objects returned here must be treated as read-only.
type ManifestIntegrityStateLister interface {
	// List lists all ManifestIntegrityStates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ManifestIntegrityState, err error)
	// ManifestIntegrityStates returns an object that can list and get ManifestIntegrityStates.
	ManifestIntegrityStates(namespace string) ManifestIntegrityStateNamespaceLister
	ManifestIntegrityStateListerExpansion
}

// manifestIntegrityStateLister implements the ManifestIntegrityStateLister interface.
type manifestIntegrityStateLister struct {
	indexer cache.Indexer
}

// NewManifestIntegrityStateLister returns a new ManifestIntegrityStateLister.
func NewManifestIntegrityStateLister(indexer cache.Indexer) ManifestIntegrityStateLister {
	return &manifestIntegrityStateLister{indexer: indexer}
}

// List lists all ManifestIntegrityStates in the indexer.
func (s *manifestIntegrityStateLister) List(selector labels.Selector) (ret []*v1.ManifestIntegrityState, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ManifestIntegrityState))
	})
	return ret, err
}

// ManifestIntegrityStates returns an object that can list and get ManifestIntegrityStates.
func (s *manifestIntegrityStateLister) ManifestIntegrityStates(namespace string) ManifestIntegrityStateNamespaceLister {
	return manifestIntegrityStateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManifestIntegrityStateNamespaceLister helps list and get ManifestIntegrityStates.
// All objects returned here must be treated as read-only.
type ManifestIntegrityStateNamespaceLister interface {
	// List lists all ManifestIntegrityStates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ManifestIntegrityState, err error)
	// Get retrieves the ManifestIntegrityState from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ManifestIntegrityState, error)
	ManifestIntegrityStateNamespaceListerExpansion
}

// manifestIntegrityStateNamespaceLister implements the ManifestIntegrityStateNamespaceLister
// interface.
type manifestIntegrityStateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManifestIntegrityStates in the indexer for a given namespace.
func (s manifestIntegrityStateNamespaceLister) List(selector labels.Selector) (ret []*v1.ManifestIntegrityState, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ManifestIntegrityState))
	})
	return ret, err
}

// Get retrieves the ManifestIntegrityState from the indexer for a given namespace and name.
func (s manifestIntegrityStateNamespaceLister) Get(name string) (*v1.ManifestIntegrityState, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("manifestintegritystate"), name)
	}
	return obj.(*v1.ManifestIntegrityState), nil
}
