/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/IBM/integrity-shield/observer/pkg/apis/verifyresourcecondition/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VerifyResourceConditionLister helps list VerifyResourceConditions.
// All objects returned here must be treated as read-only.
type VerifyResourceConditionLister interface {
	// List lists all VerifyResourceConditions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VerifyResourceCondition, err error)
	// VerifyResourceConditions returns an object that can list and get VerifyResourceConditions.
	VerifyResourceConditions(namespace string) VerifyResourceConditionNamespaceLister
	VerifyResourceConditionListerExpansion
}

// verifyResourceConditionLister implements the VerifyResourceConditionLister interface.
type verifyResourceConditionLister struct {
	indexer cache.Indexer
}

// NewVerifyResourceConditionLister returns a new VerifyResourceConditionLister.
func NewVerifyResourceConditionLister(indexer cache.Indexer) VerifyResourceConditionLister {
	return &verifyResourceConditionLister{indexer: indexer}
}

// List lists all VerifyResourceConditions in the indexer.
func (s *verifyResourceConditionLister) List(selector labels.Selector) (ret []*v1.VerifyResourceCondition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VerifyResourceCondition))
	})
	return ret, err
}

// VerifyResourceConditions returns an object that can list and get VerifyResourceConditions.
func (s *verifyResourceConditionLister) VerifyResourceConditions(namespace string) VerifyResourceConditionNamespaceLister {
	return verifyResourceConditionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VerifyResourceConditionNamespaceLister helps list and get VerifyResourceConditions.
// All objects returned here must be treated as read-only.
type VerifyResourceConditionNamespaceLister interface {
	// List lists all VerifyResourceConditions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VerifyResourceCondition, err error)
	// Get retrieves the VerifyResourceCondition from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.VerifyResourceCondition, error)
	VerifyResourceConditionNamespaceListerExpansion
}

// verifyResourceConditionNamespaceLister implements the VerifyResourceConditionNamespaceLister
// interface.
type verifyResourceConditionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VerifyResourceConditions in the indexer for a given namespace.
func (s verifyResourceConditionNamespaceLister) List(selector labels.Selector) (ret []*v1.VerifyResourceCondition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VerifyResourceCondition))
	})
	return ret, err
}

// Get retrieves the VerifyResourceCondition from the indexer for a given namespace and name.
func (s verifyResourceConditionNamespaceLister) Get(name string) (*v1.VerifyResourceCondition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("verifyresourcecondition"), name)
	}
	return obj.(*v1.VerifyResourceCondition), nil
}
