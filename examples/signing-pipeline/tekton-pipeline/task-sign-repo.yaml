apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: task-sign-artifact
spec:
  params:
   - name: task-pvc
     description: the output pvc
     default: pipelinerun-pvc
     type: string
   - name: signer-email
     description: signer-email
   - name: deploy-namespace
     description: namespace to deploy artifacts
  volumes:
    - name: kubeconfig-secret-volume
      secret:
        secretName: ie-kubeconfig-secret     
    - name: task-volume
      persistentVolumeClaim: 
        claimName: $(params.task-pvc)
  steps:             
    - name: sign-artifact
      image: us.icr.io/mutation-advisor/sign-artifact:rc1
      imagePullPolicy: Always
      volumeMounts:
        - mountPath: /config/
          name: kubeconfig-secret-volume
        - mountPath: /artifacts
          name: task-volume
      script: |             
          #!/bin/bash
          set +e
          WS="/artifacts"
          ls $WS
          cd $WS
          ls -la
          
          # Get keyring secret
          export KUBECONFIG=/config/kubeconfig
	
          kubectl get secret keyring-secret -n integrity-enforcer-ns -o json | jq -r '.data["pubring.gpg"]' | base64 -d > /tmp/tmp-secring.gpg

          # import keys
          gpg --import /tmp/tmp-secring.gpg
          gpg --list-secret-keys
          
          signer=$(params.signer-email)
          echo signer: $signer
          base='base64 -w 0'
          cat .ie-sign-config.json | yq r - -j | jq -r '.resourcefile'| jq -c '.[]'| while read line;
          do
             if [ ! -z "$line" ]; then
               echo line: $line

               rsfilename=$(echo $line | tr -d '"')
               echo "rsfilename: $rsfilename"
               rsfile=$(find . -name "$rsfilename")
               echo "rsfile $rsfile"
               rsfilebasename=$(basename -- "$rsfile")
               echo "rsfilebasename: $rsfilebasename"
               extension="${rsfilebasename##*.}"
               echo "extension: $extension"

               echo  "Generate signature for $rsfile"
               if [[ "$extension" == "yaml"  ||  "$extension" == "yml" ]]; then

                  rsigfile="rsig-$rsfilebasename"
                  tmpring='{"apiVersion":"research.ibm.com/v1alpha1","kind":"ResourceSignature","metadata":{"annotations":{"messageScope":"spec","signature":""},"name":""},"spec":{"data":[{"message":"","signature":"","type":"resource"}]}}'

                  echo -e $tmprsig | yq r - --prettyPrint >> $rsigfile
                  msg=`cat $rsfile | $base`

                  signfile="$rsfilebasename.sign"

                  signature=$( gpg -u $signer --detach-sign --armor --output - $rsfile | $base )               
                  echo signature: $signature
                  echo $signature >> $signfile


                  cat $rsigfile

                  yq w -i $rsigfile apiVersion research.ibm.com/v1alpha1
                  yq w -i $rsigfile kind ResourceSignature
                  yq w -i $rsigfile spec.data.[0].message $msg
                  yq w -i $rsigfile spec.data.[0].signature $signature
   
                  # resource signature spec content
                  rsigspec=$(cat $rsigfile | yq r - -j | jq -r '.spec' | yq r - --prettyPrint | $base)

                  echo $rsigspec > temp-rsig.yaml

                  rsigsignature=$( gpg -u $signer --detach-sign --armor --output - temp-rsig.yaml | $base )

                  # remove temp file
                  rm temp-rsig.yaml

                  # remove tmp sign file
                  rm $signfile

                  # name of resource signature
                  rsigname="rsig-$(cat $rsfile | yq r - -j | jq -r '.metadata.name')"

                  yq w -i $rsigfile metadata.annotations.signature $rsigsignature
                  yq w -i $rsigfile metadata.annotations.messageScope spec
                  yq w -i $rsigfile metadata.name $rsigname


                  echo $rsigfile >> $rsigconfigfile
                  echo "Content of ResourceSignature"
                  cat  $rsigfile
                  echo ""
                  echo ""
               
               fi
             fi  
          done
          ls -la
          echo "------------------------------------------"
          echo Completed signing artifacts
          echo "------------------------------------------"
    - name: deploy-signed-artifact
      image: us.icr.io/mutation-advisor/sign-artifact:rc1
      volumeMounts:
        - mountPath: /config/
          name: kubeconfig-secret-volume
        - mountPath: /artifacts
          name: task-volume
      script: |
          #!/bin/bash
          set +e
          export KUBECONFIG=/config/kubeconfig 
          WS="/artifacts"
          cd $WS
          IFS=$'\n'
          cat .ie-sign-config.json | yq r - -j | jq -r '.resourcefile'| jq -c '.[]'| while read line;
          do               
             rsfilename=$(echo $line | tr -d '"')
             echo "rsfilename: $rsfilename"
             rsfile=$(find . -name "$rsfilename")
             echo "rsfile $rsfile"
             rsfilebasename=$(basename -- "$rsfile")
             echo "rsfilebasename: $rsfilebasename"
             extension="${rsfilebasename##*.}"
             echo "extension: $extension"

             namespace=$(params.deploy-namespace)

             if [[ "$extension" == "yaml"  ||  "$extension" == "yml" ]]; then

                echo "Deploy resource signature for artifacts: $rsfile"     
                rsigfilename="rsig-$rsfilebasename"
                rsigfile=$(find . -name "$rsigfilename")
   
                if [ -f $rsigfile ]; then
                   echo "Deploy signed artifacts: $file"
                   kubectl apply -f $rsigfile -n integrity-enforcer-ns

                   echo "Deploy signed artifacts: $file"                                                                                                                        
                   kubectl apply -f $rsfile -n $namespace

                else
                   echo "Could not find resource signature"
                fi
              
             fi
          done   
